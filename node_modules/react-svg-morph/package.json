{
  "_args": [
    [
      {
        "raw": "react-svg-morph@^0.1.10",
        "scope": null,
        "escapedName": "react-svg-morph",
        "name": "react-svg-morph",
        "rawSpec": "^0.1.10",
        "spec": ">=0.1.10 <0.2.0",
        "type": "range"
      },
      "/Users/tcraig/dev/EROS"
    ]
  ],
  "_from": "react-svg-morph@>=0.1.10 <0.2.0",
  "_id": "react-svg-morph@0.1.10",
  "_inCache": true,
  "_location": "/react-svg-morph",
  "_nodeVersion": "4.2.3",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/react-svg-morph-0.1.10.tgz_1468098535541_0.3227482745423913"
  },
  "_npmUser": {
    "name": "gorangajic",
    "email": "fero.null@gmail.com"
  },
  "_npmVersion": "3.8.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-svg-morph@^0.1.10",
    "scope": null,
    "escapedName": "react-svg-morph",
    "name": "react-svg-morph",
    "rawSpec": "^0.1.10",
    "spec": ">=0.1.10 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-svg-morph/-/react-svg-morph-0.1.10.tgz",
  "_shasum": "780cf6823a6ab640a1367e43b7c9509d68157bf3",
  "_shrinkwrap": null,
  "_spec": "react-svg-morph@^0.1.10",
  "_where": "/Users/tcraig/dev/EROS",
  "author": {
    "name": "Goran Gajic",
    "email": "fero.null@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/gorangajic/react-svg-morph/issues"
  },
  "dependencies": {
    "react-render-to-json": "0.0.4",
    "svgpath": "^2.1.0"
  },
  "description": "morph your svg component one into another",
  "devDependencies": {
    "babel": "^5.8.23",
    "babel-eslint": "^4.1.3",
    "eslint": "^1.8.0",
    "eslint-config-airbnb": "^0.1.0",
    "eslint-plugin-react": "^3.6.3",
    "webpack": "^1.12.2"
  },
  "directories": {},
  "dist": {
    "shasum": "780cf6823a6ab640a1367e43b7c9509d68157bf3",
    "tarball": "https://registry.npmjs.org/react-svg-morph/-/react-svg-morph-0.1.10.tgz"
  },
  "gitHead": "cc9bba2584cdb257110d66667651ed5dcab00ce9",
  "homepage": "https://github.com/gorangajic/react-svg-morph#readme",
  "jsnext:main": "src/index.js",
  "keywords": [
    "react",
    "icons",
    "svg",
    "morph",
    "transform",
    "icon"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "feroc1ty",
      "email": "fero.null@gmail.com"
    }
  ],
  "name": "react-svg-morph",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.0 || ^15.0.0",
    "react-dom": "^0.14.0 || ^15.0.0"
  },
  "readme": "# React svg morph\n\n> morph your svg components one into another\n\n<img src=\"https://rawgit.com/gorangajic/react-svg-morph/master/example.gif\" width=\"60\" alt=\"React Icons\">\n\n\n# Instalation\n\n```\nnpm install react-svg-morph --save\n```\n\n# Usage example\n\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { MorphReplace } from 'react-svg-morph';\n\nclass Checked extends React.Component {\n    render() {\n        return (\n            <svg width=\"24\" fill=\"#00ea00\" height=\"24\" viewBox=\"0 0 24 24\">\n                <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>\n            </svg>\n        );\n    }\n}\n\nclass CheckBox extends React.Component {\n    render() {\n        return (\n            <svg width=\"24\" height=\"24\" fill=\"#666666\" viewBox=\"0 0 24 24\">\n                <path d=\"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"/>\n            </svg>\n        );\n    }\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: false\n        };\n    }\n    toggleChecked() {\n        this.setState({checked: !this.state.checked});\n    }\n    render() {\n        return (\n            <div onClick={this.toggleChecked.bind(this)}>\n                <MorphReplace width={100} height={100}>\n                    {this.state.checked ? <Checked key=\"checked\" /> : <CheckBox key=\"checkbox\" />}\n                </MorphReplace>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('app'));\n```\n# Usage with react-native\n\n`react-svg-morph` only works on ios because react native art package is [only available there](https://facebook.github.io/react-native/docs/known-issues.html). Before getting started you will need to include ReactNativeArt into your project, there is good example how to do that on this link http://browniefed.com/blog/2015/05/03/getting-react-art-running-on-react-native/\n\nEvrything else is the same only you need to include `MorphReplaceNative` and `MorphTransitionNative` from `react-svg-morph/native`. \n\nFor now it works with normal svg tags/components like in example top.\n\n# API\n\n### &lt;MorphReplace /> or &lt;MorphReplaceNative />\n> when children element change it will morph from one svg element into another svg element\nProps:\n\n##### `width: Number`\nwidth of the svg element defaults to 40\n##### `height: Number`\nheight of the svg element defaults to 40\n##### `viewBox: String`\nviewBox of the svg element default to `0 0 ${width} ${height}`\n##### `duration: Number`\nswap animation duration in ms defaults to 350 ms\n##### `rotation: String`\nrotation of the animation available options are `clockwise`, `counterclock`, `none` defaults to _`clockwise`_\n##### `easing: function`\neasing function, default easing is linear\n```javascript\n/*\n * Easing Functions - inspired from http://gizma.com/easing/\n * only considering the t value for the range [0, 1] => [0, 1]\n */\nvar easeInCubic = function(t) {\n    return t*t*t;\n}\n```\nthere is default easing functions already provided in `src/utils/easing` or `lib/utils/easing` so you can reuse them\n```\nimport {easeInQuint} from `lib/utils/easing`\n<MorphReplace easing={easeInQuint}>\n    {this.state.checked ? <Checked /> : <CheckBox />}\n</MorphReplace>\n\n```\n##### `children: React.Element`\nonly element you want to display need to be passed as children, when you replace that element with new one animation will be triggered. It's important to provide `key` prop to child element so `MorphReplace` know when child is changed.\n\n> every other props passed to the element will be passed to svg, so you can also pass normal svg attributes like `fill`,`opaticy`,`styles`...\n\n##### usage example\n\n```javascript\nimport {MorphReplace} from 'react-svg-morph';\n\nrender() {\n    return (\n        <MorphReplace width={100} height={100}>\n            {this.state.checked ? <Checked key={'checked'} /> : <CheckBox key={'checkbox'}/>}\n        </MorphReplace>\n    )\n}\n```\n### &lt;MorphReplaceResize />\n> same as `MorphReplace` only you should use this when you have two svg elements that have different viewBox attributes so `MorphReplaceResize` will normalize their paths before passing it to `MorphReplace`\n\n### &lt;MorphTransition /> or &lt;MorphTransitionNative />\n\n##### `width: Number`\nwidth of the svg element defaults to 40\n##### `height: Number`\nheight of the svg element defaults to 40\n##### `viewBox: String`\nviewBox of the svg element default to `0 0 ${width} ${height}`\n> viewBox is ignored in react-native\n\n##### `progress: Number`\ncurrent progress of the svg animation, default to 0\n##### `rotation: String`\nrotation of the animation available options are `clockwise`, `counterclock`, `none` defaults to _`clockwise`_\n> every other props passed to the element will be passed to svg, so you can passs normal svg attributes like `fill`,`opaticy`,`styles`...\n\n##### `children: Object{from: React.Element, to: React.Element}`\naccept two React elements that need to have svg element inside, it will morph one into another based on progress passed\n\n##### other props\nAll other props will be passed to the svg element\n\n##### usage example\n```\nimport {MorphTransition} from 'react-svg-morph';\n\nrender() {\n    return (\n        <MorphTransition progres={50} width={100} height={100}>\n            {from: <LoveSvg />, to: <LogoSvg />}\n        </MorphReplace>\n    )\n}\n```\n> it can be also used with `react-motion`\n\n\n## Related\n\n- [react-icons](https://github.com/gorangajic/react-icons/) it work with react-icons out of the box because they are all normalized to the same size\n\n## License\n\nMIT Copyright (c) Goran Gajic 2015\n\n## Credits\n\n> svg convert algoritam is takan from https://github.com/alexk111/SVG-Morpheus and addapted\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/gorangajic/react-svg-morph.git"
  },
  "scripts": {
    "build": "babel src --out-dir lib",
    "eslint": "eslint src",
    "prepublish": "npm run build"
  },
  "version": "0.1.10"
}
